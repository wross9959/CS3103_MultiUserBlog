openapi: 3.1.0
info:
  title: Blog API
  description: |-
    This is a simple API for a blog service which allows user to post blogs and interact with blogs posted by other users.
  contact:
    email: UNB_Blog_Help@unb.ca
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers: 
  - url: https://cs3103.cs.unb.ca:8023/api

tags:
  - name: users
    description: Information about users
  - name: roles
    description: Information about user roles
  - name: blogs
    description: Information about blogs
  - name: comments
    description: Information about comments
  - name: categories
    description: Information about categories
  - name: follows
    description: Information about user follows
  - name: activities
    description: Audit trail of user activities
  - name: admin
    description: Admin operations

paths:
  /users:
    get:
      tags:
        - users
      summary: List all users
      description: Retrieve a list of all users registered in the system.
      operationId: getAllUsers
      responses:
        "200":
          description: A list of users returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - users
      summary: Register a new user
      description: Creates a new user account and generates a verification token.
      operationId: createUser
      requestBody:
        description: Details of the user to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully.
        "400":
          description: Missing required details.
  
  /users/me:
    get:
      tags:
        - users
      summary: Retrieve current user details
      description: Obtain details for the currently authenticated user.
      operationId: getCurrentUser
      responses:
        "200":
          description: User details returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized access.

    put:
      tags:
        - users
      summary: Update current user
      description: Update details for the currently authenticated user.
      operationId: updateCurrentUser
      requestBody:
        description: Updated user object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully.
        "400":
          description: Invalid input.
        "401":
          description: Unauthorized access.

    delete:
      tags:
        - users
      summary: Delete current user
      description: Delete the account of the currently authenticated user.
      operationId: deleteCurrentUser
      responses:
        "204":
          description: User deleted successfully.
        "401":
          description: Unauthorized access.

  /users/me/profile:
    put:
      tags:
        - users
      summary: Update user profile
      description: Update the first and last name of the currently authenticated user.
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        "200":
          description: Profile updated successfully.
        "400":
          description: Invalid input.
        "401":
          description: Unauthorized access.

  /users/me/verify:
    get:
      tags:
        - users
      summary: Request email verification for current user
      description: Request a new verification token for the currently authenticated user.
      operationId: generateCurrentUserVerificationToken
      responses:
        "200":
          description: Verification email sent successfully.
        "401":
          description: Unauthorized access.

    post:
      tags:
        - users
      summary: Verify current user account
      description: Verify the currently authenticated user's account by providing the verification token.
      operationId: verifyCurrentUserEmail
      requestBody:
        description: Verification token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200":
          description: User account verified successfully.
        "400":
          description: Invalid verification token.
        "401":
          description: Unauthorized access.

  /admin/users:
    get:
      tags:
        - admin
      summary: List all users (admin only)
      description: Retrieve a list of all users registered in the system. Requires admin privileges.
      operationId: getAllUsersAdmin
      responses:
        "200":
          description: A list of users returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "403":
          description: Forbidden. Admin access required.

  /admin/users/{userId}:
    get:
      tags:
        - admin
      summary: Retrieve user details (admin only)
      description: Obtain details for a specific user by user ID. Requires admin privileges.
      operationId: getUserByAdmin
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User details returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: Forbidden. Admin access required.
        "404":
          description: User not found.

    delete:
      tags:
        - admin
      summary: Delete a user (admin only)
      description: Delete the user account identified by user ID. Requires admin privileges.
      operationId: deleteUserByAdmin
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted successfully.
        "403":
          description: Forbidden. Admin access required.
        "404":
          description: User not found.

  /users/{userId}:
    get:
      tags:
        - users
      summary: Retrieve user details
      description: Obtain details for a specific user by user ID.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User details returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
    put:
      tags:
        - users
      summary: Update a user
      description: Update user details for a given user ID.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated user object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully.
        "400":
          description: Invalid input.
    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete the user account identified by user ID.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted successfully.
        "404":
          description: User not found.
  
  /users/reset-password:
    get:
      tags:
        - users
      summary: Request password reset for current user
      description: Request a password reset token to be sent to the currently authenticated user's email.
      operationId: generateCurrentUserPasswordResetToken
      responses:
        "200":
          description: Password reset email sent successfully.
        "401":
          description: Unauthorized access.

    post:
      tags:
        - users
      summary: Reset current user password
      description: Reset the password for the currently authenticated user using a verification token.
      operationId: resetCurrentUserPassword
      requestBody:
        description: Verification token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        "200":
          description: User password reset successfully.
        "400":
          description: Invalid verification token.
        "401":
          description: Unauthorized access.

  /users/reset-password-request:
    post:
      tags:
        - users
      summary: Request password reset (public)
      description: Sends a password reset token to the user's email address.
      operationId: requestPasswordResetPublic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Reset email sent successfully.
        "404":
          description: Email not found.

  /roles:
    get:
      tags:
        - roles
      summary: List all roles
      description: Retrieve a list of all roles available in the system.
      operationId: getAllRoles
      responses:
        "200":
          description: A list of roles returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
    post:
      tags:
        - roles
      summary: Create a new role
      description: Create a new role in the system.
      operationId: createRole
      requestBody:
        description: Name of the new role
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        "201":
          description: Role created successfully.
        "400":
          description: Role already exists.
    
  /roles/{roleId}:
    get:
      tags:
        - roles
      summary: Retrieve role details
      description: Obtain details for a specific role by role ID.
      operationId: getRole
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Role details returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: Role not found.
    delete:
      tags:
        - roles
      summary: Delete a role
      description: Delete a role from the system.
      operationId: deleteRole
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Role deleted successfully.
        "404":
          description: Role not found.
  
  /roles/{userId}:
    get:
      tags:
        - roles
      summary: Retrieve user roles
      description: Obtain a list of roles assigned to a specific user by user ID.
      operationId: getUserRoles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User roles returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "404":
          description: User not found.
    post:
      tags:
        - roles
      summary: Assign role to user
      description: Assign a new role to the user identified by user ID.
      operationId: assignRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Role to be assigned
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
      responses:
        "201":
          description: Role assigned successfully.
        "400":
          description: Invalid role.
    
  /roles/{userId}/{roleId}:
    delete:
      tags:
        - roles
      summary: Remove role from user
      description: Remove a role from the user identified by user ID.
      operationId: removeRole
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Role removed successfully.
        "404":
          description: User or role not found.
  
  /blogs:
    get:
      tags:
        - blogs
      summary: List all blogs
      description: Retrieve a list of all blogs posted in the system, with optional filters.
      operationId: getAllBlogs
      parameters:
        - name: newerThan
          in: query
          description: Retrieve blogs posted after this date (ISO 8601 format).
          schema:
            type: string
            format: date-time
        - name: category
          in: query
          description: Retrieve blogs that belong to the specified category.
          schema:
            type: string
        - name: keyword
          in: query
          description: Retrieve blogs that contain this keyword in the title or body.
          schema:
            type: string
      responses:
        "200":
          description: A list of blogs returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
  
  /blogs/{blogId}:
    get:
      tags:
        - blogs
      summary: Retrieve blog details
      description: Obtain details for a specific blog by blog ID.
      operationId: getBlog
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Blog details returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
        "404":
          description: Blog not found.
    put:
      tags:
        - blogs
      summary: Update a blog
      description: Update blog details for a given blog ID.
      operationId: updateBlog
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated blog object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blog"
      responses:
        "200":
          description: Blog updated successfully.
        "400":
          description: Invalid input.
        "404":
          description: Blog not found.
    delete:
      tags:
        - blogs
      summary: Delete a blog
      description: Delete the blog post identified by blog ID.
      operationId: deleteBlog
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Blog deleted successfully.
        "404":
          description: Blog not found.
  
  /blogs/{userId}:
    get:
      tags:
        - blogs
      summary: Retrieve user blogs
      description: Obtain a list of blogs posted by a specific user by user ID.
      operationId: getUserBlogs
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User blogs returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Blog"
        "404":
          description: User not found.
  
  /blogs/{blogId}/comments:
    get:
      tags:
        - comments
      summary: List all comments on a blog
      description: Retrieve a list of all comments posted on a specific blog, with optional filters.
      operationId: getAllComments
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
        - name: newerThan
          in: query
          description: Retrieve comments posted after this date.
          schema:
            type: string
            format: date-time
        - name: keyword
          in: query
          description: Retrieve comments that contain this keyword in the body.
          schema:
            type: string
      responses:
        "200":
          description: A list of comments returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
     
    post:
      tags:
        - comments
      summary: Create a new comment
      description: Create a new comment on a specific blog post.
      operationId: createComment
      parameters:
        - name: blogId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Details of the comment to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "201":
          description: Comment created successfully.
        "400":
          description: Missing required details.
    
  /blogs/comments/{commentId}:
    put:
      tags:
        - comments
      summary: Update a comment
      description: Update comment details for a given comment ID.
      operationId: updateComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated comment object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Comment"
      responses:
        "200":
          description: Comment updated successfully.
        "400":
          description: Invalid input.
    delete:
      tags:
        - comments
      summary: Delete a comment
      description: Delete the comment identified by comment ID.
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Comment deleted successfully.
        "404":
          description: Comment not found.

  /categories:
    get:
      tags:
        - categories
      summary: List all categories
      description: Retrieve a list of all categories available in the system.
      operationId: getAllCategories
      responses:
        "200":
          description: A list of categories returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
    post:
      tags:
        - categories
      summary: Create a new category
      description: Create a new category in the system.
      operationId: createCategory
      requestBody:
        description: Details of the category to be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category created successfully.
        "400":
          description: Missing required details.
  
  /categories/{categoryId}:
    get:
      tags:
        - categories
      summary: Retrieve category details
      description: Obtain details for a specific category by category ID.
      operationId: getCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Category details returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found.
    put:
      tags:
        - categories
      summary: Update a category
      description: Update category details for a given category ID.
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated category object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: Category updated successfully.
        "400":
          description: Invalid input.
    delete:
      tags:
        - categories
      summary: Delete a category
      description: Delete the category identified by category ID.
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Category deleted successfully.
        "404":
          description: Category not found.
 
  /users/{userId}/follows:
    get:
      tags:
        - follows
      summary: List all user follows
      description: Retrieve a list of all users followed by a specific user.
      operationId: getAllFollows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A list of users followed returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: User not found.
  /users/{userId}/follows/{followId}:
    post:
      tags:
        - follows
      summary: Follow a user
      description: Follow a new user identified by user ID.
      operationId: followUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: followId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: User followed successfully.
        "400":
          description: Invalid user.
    delete:
      tags:
        - follows
      summary: Unfollow a user
      description: Unfollow a user identified by user ID.
      operationId: unfollowUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: followId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User unfollowed successfully.
        "404":
          description: User not found.
  
  /activities:
    get:
      tags:
        - activities
      summary: List all activities
      description: Retrieve a list of all user activities in the system.
      operationId: getAllActivities
      responses:
        "200":
          description: A list of activities returned successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Activity"
    post:
      tags:
        - activities
      summary: Log user activity
      description: Log a new user activity in the system.
      operationId: logActivity
      requestBody:
        description: Details of the activity to be logged
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        "201":
          description: Activity logged successfully.
        "400":
          description: Missing required details.
  
components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - password
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        roles:
          type: array
          items:
            type: string
        active:
          type: boolean

    Profile:
      type: object
      required:
        - user_id
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Wick
    Role:
      type: object
      required:
        - role
      properties:
        id:
          type: integer
          example: 1
        role:
          type: string
          example: admin
    Blog:
      type: object
      required:
        - title
        - body
        - user_id
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: My First Blog Post
        body:
          type: string
          example: This is the body of my first blog post.
        user_id:
          type: integer
          example: 1
        status:
          type: string
          example: published
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
          example: [Technology, Gadgets]
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T12:00:00Z
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Technology
        description:
          type: string
          example: Blogs related to technology and gadgets.
    Comment:
      type: object
      required:
        - user_id
        - blog_id
        - body
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        blog_id:
          type: integer
          example: 1
        body:
          type: string
          example: This is a great blog post!
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T12:00:00Z
    Activity:
      type: object
      required:
        - user_id
        - action
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        action:
          type: string
          example: User created a new blog post.
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T12:00:00Z
